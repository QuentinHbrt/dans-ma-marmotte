directive @embedded on OBJECT
directive @collection(name: String!) on OBJECT
directive @index(name: String!) on FIELD_DEFINITION
directive @resolver(
  name: String
  paginated: Boolean! = false
) on FIELD_DEFINITION
directive @relation(name: String) on FIELD_DEFINITION
directive @unique(index: String) on FIELD_DEFINITION
scalar Date

scalar Long

type Mutation {
  createRoom(data: RoomInput!): Room!
  updateStorage(
    id: ID!
    data: StorageInput!
  ): Storage
  deleteStorage(id: ID!): Storage
  createStorage(data: StorageInput!): Storage!
  updateRoom(
    id: ID!
    data: RoomInput!
  ): Room
  createProduct(data: ProductInput!): Product!
  updateProduct(
    id: ID!
    data: ProductInput!
  ): Product
  deleteProduct(id: ID!): Product
  deleteRoom(id: ID!): Room
}

type Product {
  name: String!
  storageId: ID!
  _id: ID!
  id: ID!
  category: String!
  _ts: Long!
}

input ProductInput {
  id: ID!
  name: String!
  storageId: ID!
  category: String!
}

type ProductPage {
  data: [Product]!
  after: String
  before: String
}

type Query {
  findProductByID(id: ID!): Product
  findRoomByID(id: ID!): Room
  products(
    _size: Int
    _cursor: String
  ): ProductPage!
  rooms(
    _size: Int
    _cursor: String
  ): RoomPage!
  findStorageByID(id: ID!): Storage
  storages(
    _size: Int
    _cursor: String
  ): StoragePage!
}

type Room {
  name: String!
  _id: ID!
  color: String!
  id: ID!
  _ts: Long!
}

input RoomInput {
  id: ID!
  name: String!
  color: String!
}

type RoomPage {
  data: [Room]!
  after: String
  before: String
}

type Storage {
  roomId: ID!
  name: String!
  _id: ID!
  id: ID!
  _ts: Long!
}

input StorageInput {
  id: ID!
  name: String!
  roomId: ID!
}

type StoragePage {
  data: [Storage]!
  after: String
  before: String
}

scalar Time